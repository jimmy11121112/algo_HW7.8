#define Keys 600

void quicksort(int *A, int head, int tail) {
    if (head < tail-1) {
        int q = partition(A, head, tail);
        quicksort(A, head, q);
        quicksort(A, q+1, tail);
    }
}

void quicksort_mix(int *A, int head, int tail) {
    my_quicksort(A, head, tail, Keys);
    insertion_sort(A, head, tail);
}

void my_quicksort(int *A, int head, int tail, int treshold) {
    if (tail-head > treshold) {
        int q = partition(A, head, tail);
        my_quicksort(A, head, q, treshold);
        my_quicksort(A, q + 1, tail, treshold);
    }
}

void insertion_sort(int *A, int head, int tail) {
    int i, j, key;

    for (j=head+1; j<tail; j++) {
        key = A[j];
        for (i=j-1; i>=head && A[i]>key; i--) {
            A[i+1] = A[i];
        }
        A[i+1] = key;
    }
}

int partition(int *A, int head, int tail) {
    int x, i, j, tmp;
    x = A[tail-1];
    i = head;
    for (j=head; j<tail-1; j++) {
        if (A[j] <= x) {
            tmp = A[i];
            A[i] = A[j];
            A[j] = tmp;
            i++;
        }
    }

    tmp = A[i];
    A[i] = A[tail-1];
    A[tail-1] = tmp;

    return i;
}
